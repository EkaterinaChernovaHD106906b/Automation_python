{"name": "Check autocomplete", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_widgets.TestWidgets.TestAutoComplete object at 0x000001664767CD10>\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ef2ac37d79b795e2dacac36b8f0d89b8\")>\n\n    @allure.title('Check autocomplete')\n    def test_fill_multi_complete(self, driver):\n        auto_complete_page = AutoCompletePage(driver, 'https://demoqa.com/auto-complete')\n        auto_complete_page.open()\n        colors = auto_complete_page.fill_input_multi()\n>       colors_result = auto_complete_page.check_color_in_multi()\n\ntests\\test_widgets.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\auto_complete_page.py:36: in check_color_in_multi\n    color_list = self.elements_are_present(self.MULTI_VALUE)\npages\\base_page.py:24: in elements_are_present\n    return wait(self.driver, timeout).until(EC.presence_of_all_elements_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"ef2ac37d79b795e2dacac36b8f0d89b8\")>\nmethod = <function presence_of_all_elements_located.<locals>._predicate at 0x00000166477CBCE0>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException"}, "start": 1683554363828, "stop": 1683554373348, "uuid": "3038eb16-15d9-4a72-b822-8dcde6a4ebdf", "historyId": "e908921149d42a915dbf3c1095eaca86", "testCaseId": "e908921149d42a915dbf3c1095eaca86", "fullName": "tests.test_widgets.TestAutoComplete#test_fill_multi_complete", "labels": [{"name": "suite", "value": "Widgets"}, {"name": "feature", "value": "AutoComplete"}, {"name": "parentSuite", "value": "tests"}, {"name": "subSuite", "value": "TestWidgets"}, {"name": "host", "value": "WIN-O19C0JKJNIB"}, {"name": "thread", "value": "12788-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_widgets"}]}